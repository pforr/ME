/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.cmon.user.dao.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import vn.dtt.cmon.dm.dao.service.persistence.DATAITEMFinder;
import vn.dtt.cmon.dm.dao.service.persistence.DATAITEMPersistence;
import vn.dtt.cmon.user.dao.model.UserTramCap;
import vn.dtt.cmon.user.dao.service.UserTramCapLocalService;
import vn.dtt.cmon.user.dao.service.persistence.UserHuyenFinder;
import vn.dtt.cmon.user.dao.service.persistence.UserHuyenPersistence;
import vn.dtt.cmon.user.dao.service.persistence.UserMappingFinder;
import vn.dtt.cmon.user.dao.service.persistence.UserMappingPersistence;
import vn.dtt.cmon.user.dao.service.persistence.UserTUFinder;
import vn.dtt.cmon.user.dao.service.persistence.UserTUPersistence;
import vn.dtt.cmon.user.dao.service.persistence.UserTinhFinder;
import vn.dtt.cmon.user.dao.service.persistence.UserTinhPersistence;
import vn.dtt.cmon.user.dao.service.persistence.UserTramCapFinder;
import vn.dtt.cmon.user.dao.service.persistence.UserTramCapPersistence;

import vn.dtt.sol.ns.tramcap.dao.service.persistence.TramCapNuocFinder;
import vn.dtt.sol.ns.tramcap.dao.service.persistence.TramCapNuocPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user tram cap local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.dtt.cmon.user.dao.service.impl.UserTramCapLocalServiceImpl}.
 * </p>
 *
 * @author khoa.vu
 * @see vn.dtt.cmon.user.dao.service.impl.UserTramCapLocalServiceImpl
 * @see vn.dtt.cmon.user.dao.service.UserTramCapLocalServiceUtil
 * @generated
 */
public abstract class UserTramCapLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserTramCapLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link vn.dtt.cmon.user.dao.service.UserTramCapLocalServiceUtil} to access the user tram cap local service.
	 */

	/**
	 * Adds the user tram cap to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userTramCap the user tram cap
	 * @return the user tram cap that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserTramCap addUserTramCap(UserTramCap userTramCap)
		throws SystemException {
		userTramCap.setNew(true);

		return userTramCapPersistence.update(userTramCap);
	}

	/**
	 * Creates a new user tram cap with the primary key. Does not add the user tram cap to the database.
	 *
	 * @param id the primary key for the new user tram cap
	 * @return the new user tram cap
	 */
	@Override
	public UserTramCap createUserTramCap(long id) {
		return userTramCapPersistence.create(id);
	}

	/**
	 * Deletes the user tram cap with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the user tram cap
	 * @return the user tram cap that was removed
	 * @throws PortalException if a user tram cap with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserTramCap deleteUserTramCap(long id)
		throws PortalException, SystemException {
		return userTramCapPersistence.remove(id);
	}

	/**
	 * Deletes the user tram cap from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userTramCap the user tram cap
	 * @return the user tram cap that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserTramCap deleteUserTramCap(UserTramCap userTramCap)
		throws SystemException {
		return userTramCapPersistence.remove(userTramCap);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserTramCap.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return userTramCapPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.cmon.user.dao.model.impl.UserTramCapModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return userTramCapPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.cmon.user.dao.model.impl.UserTramCapModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return userTramCapPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return userTramCapPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return userTramCapPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserTramCap fetchUserTramCap(long id) throws SystemException {
		return userTramCapPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the user tram cap with the primary key.
	 *
	 * @param id the primary key of the user tram cap
	 * @return the user tram cap
	 * @throws PortalException if a user tram cap with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserTramCap getUserTramCap(long id)
		throws PortalException, SystemException {
		return userTramCapPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return userTramCapPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user tram caps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.cmon.user.dao.model.impl.UserTramCapModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user tram caps
	 * @param end the upper bound of the range of user tram caps (not inclusive)
	 * @return the range of user tram caps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<UserTramCap> getUserTramCaps(int start, int end)
		throws SystemException {
		return userTramCapPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user tram caps.
	 *
	 * @return the number of user tram caps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getUserTramCapsCount() throws SystemException {
		return userTramCapPersistence.countAll();
	}

	/**
	 * Updates the user tram cap in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userTramCap the user tram cap
	 * @return the user tram cap that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserTramCap updateUserTramCap(UserTramCap userTramCap)
		throws SystemException {
		return userTramCapPersistence.update(userTramCap);
	}

	/**
	 * Returns the user huyen local service.
	 *
	 * @return the user huyen local service
	 */
	public vn.dtt.cmon.user.dao.service.UserHuyenLocalService getUserHuyenLocalService() {
		return userHuyenLocalService;
	}

	/**
	 * Sets the user huyen local service.
	 *
	 * @param userHuyenLocalService the user huyen local service
	 */
	public void setUserHuyenLocalService(
		vn.dtt.cmon.user.dao.service.UserHuyenLocalService userHuyenLocalService) {
		this.userHuyenLocalService = userHuyenLocalService;
	}

	/**
	 * Returns the user huyen persistence.
	 *
	 * @return the user huyen persistence
	 */
	public UserHuyenPersistence getUserHuyenPersistence() {
		return userHuyenPersistence;
	}

	/**
	 * Sets the user huyen persistence.
	 *
	 * @param userHuyenPersistence the user huyen persistence
	 */
	public void setUserHuyenPersistence(
		UserHuyenPersistence userHuyenPersistence) {
		this.userHuyenPersistence = userHuyenPersistence;
	}

	/**
	 * Returns the user huyen finder.
	 *
	 * @return the user huyen finder
	 */
	public UserHuyenFinder getUserHuyenFinder() {
		return userHuyenFinder;
	}

	/**
	 * Sets the user huyen finder.
	 *
	 * @param userHuyenFinder the user huyen finder
	 */
	public void setUserHuyenFinder(UserHuyenFinder userHuyenFinder) {
		this.userHuyenFinder = userHuyenFinder;
	}

	/**
	 * Returns the user mapping local service.
	 *
	 * @return the user mapping local service
	 */
	public vn.dtt.cmon.user.dao.service.UserMappingLocalService getUserMappingLocalService() {
		return userMappingLocalService;
	}

	/**
	 * Sets the user mapping local service.
	 *
	 * @param userMappingLocalService the user mapping local service
	 */
	public void setUserMappingLocalService(
		vn.dtt.cmon.user.dao.service.UserMappingLocalService userMappingLocalService) {
		this.userMappingLocalService = userMappingLocalService;
	}

	/**
	 * Returns the user mapping persistence.
	 *
	 * @return the user mapping persistence
	 */
	public UserMappingPersistence getUserMappingPersistence() {
		return userMappingPersistence;
	}

	/**
	 * Sets the user mapping persistence.
	 *
	 * @param userMappingPersistence the user mapping persistence
	 */
	public void setUserMappingPersistence(
		UserMappingPersistence userMappingPersistence) {
		this.userMappingPersistence = userMappingPersistence;
	}

	/**
	 * Returns the user mapping finder.
	 *
	 * @return the user mapping finder
	 */
	public UserMappingFinder getUserMappingFinder() {
		return userMappingFinder;
	}

	/**
	 * Sets the user mapping finder.
	 *
	 * @param userMappingFinder the user mapping finder
	 */
	public void setUserMappingFinder(UserMappingFinder userMappingFinder) {
		this.userMappingFinder = userMappingFinder;
	}

	/**
	 * Returns the user tinh local service.
	 *
	 * @return the user tinh local service
	 */
	public vn.dtt.cmon.user.dao.service.UserTinhLocalService getUserTinhLocalService() {
		return userTinhLocalService;
	}

	/**
	 * Sets the user tinh local service.
	 *
	 * @param userTinhLocalService the user tinh local service
	 */
	public void setUserTinhLocalService(
		vn.dtt.cmon.user.dao.service.UserTinhLocalService userTinhLocalService) {
		this.userTinhLocalService = userTinhLocalService;
	}

	/**
	 * Returns the user tinh persistence.
	 *
	 * @return the user tinh persistence
	 */
	public UserTinhPersistence getUserTinhPersistence() {
		return userTinhPersistence;
	}

	/**
	 * Sets the user tinh persistence.
	 *
	 * @param userTinhPersistence the user tinh persistence
	 */
	public void setUserTinhPersistence(UserTinhPersistence userTinhPersistence) {
		this.userTinhPersistence = userTinhPersistence;
	}

	/**
	 * Returns the user tinh finder.
	 *
	 * @return the user tinh finder
	 */
	public UserTinhFinder getUserTinhFinder() {
		return userTinhFinder;
	}

	/**
	 * Sets the user tinh finder.
	 *
	 * @param userTinhFinder the user tinh finder
	 */
	public void setUserTinhFinder(UserTinhFinder userTinhFinder) {
		this.userTinhFinder = userTinhFinder;
	}

	/**
	 * Returns the user tram cap local service.
	 *
	 * @return the user tram cap local service
	 */
	public vn.dtt.cmon.user.dao.service.UserTramCapLocalService getUserTramCapLocalService() {
		return userTramCapLocalService;
	}

	/**
	 * Sets the user tram cap local service.
	 *
	 * @param userTramCapLocalService the user tram cap local service
	 */
	public void setUserTramCapLocalService(
		vn.dtt.cmon.user.dao.service.UserTramCapLocalService userTramCapLocalService) {
		this.userTramCapLocalService = userTramCapLocalService;
	}

	/**
	 * Returns the user tram cap persistence.
	 *
	 * @return the user tram cap persistence
	 */
	public UserTramCapPersistence getUserTramCapPersistence() {
		return userTramCapPersistence;
	}

	/**
	 * Sets the user tram cap persistence.
	 *
	 * @param userTramCapPersistence the user tram cap persistence
	 */
	public void setUserTramCapPersistence(
		UserTramCapPersistence userTramCapPersistence) {
		this.userTramCapPersistence = userTramCapPersistence;
	}

	/**
	 * Returns the user tram cap finder.
	 *
	 * @return the user tram cap finder
	 */
	public UserTramCapFinder getUserTramCapFinder() {
		return userTramCapFinder;
	}

	/**
	 * Sets the user tram cap finder.
	 *
	 * @param userTramCapFinder the user tram cap finder
	 */
	public void setUserTramCapFinder(UserTramCapFinder userTramCapFinder) {
		this.userTramCapFinder = userTramCapFinder;
	}

	/**
	 * Returns the user t u local service.
	 *
	 * @return the user t u local service
	 */
	public vn.dtt.cmon.user.dao.service.UserTULocalService getUserTULocalService() {
		return userTULocalService;
	}

	/**
	 * Sets the user t u local service.
	 *
	 * @param userTULocalService the user t u local service
	 */
	public void setUserTULocalService(
		vn.dtt.cmon.user.dao.service.UserTULocalService userTULocalService) {
		this.userTULocalService = userTULocalService;
	}

	/**
	 * Returns the user t u persistence.
	 *
	 * @return the user t u persistence
	 */
	public UserTUPersistence getUserTUPersistence() {
		return userTUPersistence;
	}

	/**
	 * Sets the user t u persistence.
	 *
	 * @param userTUPersistence the user t u persistence
	 */
	public void setUserTUPersistence(UserTUPersistence userTUPersistence) {
		this.userTUPersistence = userTUPersistence;
	}

	/**
	 * Returns the user t u finder.
	 *
	 * @return the user t u finder
	 */
	public UserTUFinder getUserTUFinder() {
		return userTUFinder;
	}

	/**
	 * Sets the user t u finder.
	 *
	 * @param userTUFinder the user t u finder
	 */
	public void setUserTUFinder(UserTUFinder userTUFinder) {
		this.userTUFinder = userTUFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the d a t a i t e m local service.
	 *
	 * @return the d a t a i t e m local service
	 */
	public vn.dtt.cmon.dm.dao.service.DATAITEMLocalService getDATAITEMLocalService() {
		return dataitemLocalService;
	}

	/**
	 * Sets the d a t a i t e m local service.
	 *
	 * @param dataitemLocalService the d a t a i t e m local service
	 */
	public void setDATAITEMLocalService(
		vn.dtt.cmon.dm.dao.service.DATAITEMLocalService dataitemLocalService) {
		this.dataitemLocalService = dataitemLocalService;
	}

	/**
	 * Returns the d a t a i t e m remote service.
	 *
	 * @return the d a t a i t e m remote service
	 */
	public vn.dtt.cmon.dm.dao.service.DATAITEMService getDATAITEMService() {
		return dataitemService;
	}

	/**
	 * Sets the d a t a i t e m remote service.
	 *
	 * @param dataitemService the d a t a i t e m remote service
	 */
	public void setDATAITEMService(
		vn.dtt.cmon.dm.dao.service.DATAITEMService dataitemService) {
		this.dataitemService = dataitemService;
	}

	/**
	 * Returns the d a t a i t e m persistence.
	 *
	 * @return the d a t a i t e m persistence
	 */
	public DATAITEMPersistence getDATAITEMPersistence() {
		return dataitemPersistence;
	}

	/**
	 * Sets the d a t a i t e m persistence.
	 *
	 * @param dataitemPersistence the d a t a i t e m persistence
	 */
	public void setDATAITEMPersistence(DATAITEMPersistence dataitemPersistence) {
		this.dataitemPersistence = dataitemPersistence;
	}

	/**
	 * Returns the d a t a i t e m finder.
	 *
	 * @return the d a t a i t e m finder
	 */
	public DATAITEMFinder getDATAITEMFinder() {
		return dataitemFinder;
	}

	/**
	 * Sets the d a t a i t e m finder.
	 *
	 * @param dataitemFinder the d a t a i t e m finder
	 */
	public void setDATAITEMFinder(DATAITEMFinder dataitemFinder) {
		this.dataitemFinder = dataitemFinder;
	}

	/**
	 * Returns the tram cap nuoc local service.
	 *
	 * @return the tram cap nuoc local service
	 */
	public vn.dtt.sol.ns.tramcap.dao.service.TramCapNuocLocalService getTramCapNuocLocalService() {
		return tramCapNuocLocalService;
	}

	/**
	 * Sets the tram cap nuoc local service.
	 *
	 * @param tramCapNuocLocalService the tram cap nuoc local service
	 */
	public void setTramCapNuocLocalService(
		vn.dtt.sol.ns.tramcap.dao.service.TramCapNuocLocalService tramCapNuocLocalService) {
		this.tramCapNuocLocalService = tramCapNuocLocalService;
	}

	/**
	 * Returns the tram cap nuoc persistence.
	 *
	 * @return the tram cap nuoc persistence
	 */
	public TramCapNuocPersistence getTramCapNuocPersistence() {
		return tramCapNuocPersistence;
	}

	/**
	 * Sets the tram cap nuoc persistence.
	 *
	 * @param tramCapNuocPersistence the tram cap nuoc persistence
	 */
	public void setTramCapNuocPersistence(
		TramCapNuocPersistence tramCapNuocPersistence) {
		this.tramCapNuocPersistence = tramCapNuocPersistence;
	}

	/**
	 * Returns the tram cap nuoc finder.
	 *
	 * @return the tram cap nuoc finder
	 */
	public TramCapNuocFinder getTramCapNuocFinder() {
		return tramCapNuocFinder;
	}

	/**
	 * Sets the tram cap nuoc finder.
	 *
	 * @param tramCapNuocFinder the tram cap nuoc finder
	 */
	public void setTramCapNuocFinder(TramCapNuocFinder tramCapNuocFinder) {
		this.tramCapNuocFinder = tramCapNuocFinder;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("vn.dtt.cmon.user.dao.model.UserTramCap",
			userTramCapLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"vn.dtt.cmon.user.dao.model.UserTramCap");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return UserTramCap.class;
	}

	protected String getModelClassName() {
		return UserTramCap.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = userTramCapPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = vn.dtt.cmon.user.dao.service.UserHuyenLocalService.class)
	protected vn.dtt.cmon.user.dao.service.UserHuyenLocalService userHuyenLocalService;
	@BeanReference(type = UserHuyenPersistence.class)
	protected UserHuyenPersistence userHuyenPersistence;
	@BeanReference(type = UserHuyenFinder.class)
	protected UserHuyenFinder userHuyenFinder;
	@BeanReference(type = vn.dtt.cmon.user.dao.service.UserMappingLocalService.class)
	protected vn.dtt.cmon.user.dao.service.UserMappingLocalService userMappingLocalService;
	@BeanReference(type = UserMappingPersistence.class)
	protected UserMappingPersistence userMappingPersistence;
	@BeanReference(type = UserMappingFinder.class)
	protected UserMappingFinder userMappingFinder;
	@BeanReference(type = vn.dtt.cmon.user.dao.service.UserTinhLocalService.class)
	protected vn.dtt.cmon.user.dao.service.UserTinhLocalService userTinhLocalService;
	@BeanReference(type = UserTinhPersistence.class)
	protected UserTinhPersistence userTinhPersistence;
	@BeanReference(type = UserTinhFinder.class)
	protected UserTinhFinder userTinhFinder;
	@BeanReference(type = vn.dtt.cmon.user.dao.service.UserTramCapLocalService.class)
	protected vn.dtt.cmon.user.dao.service.UserTramCapLocalService userTramCapLocalService;
	@BeanReference(type = UserTramCapPersistence.class)
	protected UserTramCapPersistence userTramCapPersistence;
	@BeanReference(type = UserTramCapFinder.class)
	protected UserTramCapFinder userTramCapFinder;
	@BeanReference(type = vn.dtt.cmon.user.dao.service.UserTULocalService.class)
	protected vn.dtt.cmon.user.dao.service.UserTULocalService userTULocalService;
	@BeanReference(type = UserTUPersistence.class)
	protected UserTUPersistence userTUPersistence;
	@BeanReference(type = UserTUFinder.class)
	protected UserTUFinder userTUFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = vn.dtt.cmon.dm.dao.service.DATAITEMLocalService.class)
	protected vn.dtt.cmon.dm.dao.service.DATAITEMLocalService dataitemLocalService;
	@BeanReference(type = vn.dtt.cmon.dm.dao.service.DATAITEMService.class)
	protected vn.dtt.cmon.dm.dao.service.DATAITEMService dataitemService;
	@BeanReference(type = DATAITEMPersistence.class)
	protected DATAITEMPersistence dataitemPersistence;
	@BeanReference(type = DATAITEMFinder.class)
	protected DATAITEMFinder dataitemFinder;
	@BeanReference(type = vn.dtt.sol.ns.tramcap.dao.service.TramCapNuocLocalService.class)
	protected vn.dtt.sol.ns.tramcap.dao.service.TramCapNuocLocalService tramCapNuocLocalService;
	@BeanReference(type = TramCapNuocPersistence.class)
	protected TramCapNuocPersistence tramCapNuocPersistence;
	@BeanReference(type = TramCapNuocFinder.class)
	protected TramCapNuocFinder tramCapNuocFinder;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private UserTramCapLocalServiceClpInvoker _clpInvoker = new UserTramCapLocalServiceClpInvoker();
}