/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.cmon.user.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.cmon.user.dao.model.UserMapping;
import vn.dtt.cmon.user.dao.model.UserMappingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserMapping service. Represents a row in the &quot;DM_USERMAPPING&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.cmon.user.dao.model.UserMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserMappingImpl}.
 * </p>
 *
 * @author khoa.vu
 * @see UserMappingImpl
 * @see vn.dtt.cmon.user.dao.model.UserMapping
 * @see vn.dtt.cmon.user.dao.model.UserMappingModel
 * @generated
 */
public class UserMappingModelImpl extends BaseModelImpl<UserMapping>
	implements UserMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user mapping model instance should use the {@link vn.dtt.cmon.user.dao.model.UserMapping} interface instead.
	 */
	public static final String TABLE_NAME = "DM_USERMAPPING";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "NAME", Types.VARCHAR },
			{ "USERID", Types.BIGINT },
			{ "USERTYPE", Types.INTEGER },
			{ "ORGCODE1", Types.VARCHAR },
			{ "ORGCODE2", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_USERMAPPING (ID LONG not null primary key,NAME VARCHAR(75) null,USERID LONG,USERTYPE INTEGER,ORGCODE1 VARCHAR(75) null,ORGCODE2 VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_USERMAPPING";
	public static final String ORDER_BY_JPQL = " ORDER BY userMapping.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_USERMAPPING.ID ASC";
	public static final String DATA_SOURCE = "dmDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.cmon.user.dao.model.UserMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.cmon.user.dao.model.UserMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.cmon.user.dao.model.UserMapping"),
			true);
	public static long ORGCODE1_COLUMN_BITMASK = 1L;
	public static long ORGCODE2_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long USERTYPE_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.cmon.user.dao.model.UserMapping"));

	public UserMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserMapping.class;
	}

	@Override
	public String getModelClassName() {
		return UserMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("name", getName());
		attributes.put("userId", getUserId());
		attributes.put("userType", getUserType());
		attributes.put("orgCode1", getOrgCode1());
		attributes.put("orgCode2", getOrgCode2());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer userType = (Integer)attributes.get("userType");

		if (userType != null) {
			setUserType(userType);
		}

		String orgCode1 = (String)attributes.get("orgCode1");

		if (orgCode1 != null) {
			setOrgCode1(orgCode1);
		}

		String orgCode2 = (String)attributes.get("orgCode2");

		if (orgCode2 != null) {
			setOrgCode2(orgCode2);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public int getUserType() {
		return _userType;
	}

	@Override
	public void setUserType(int userType) {
		_columnBitmask |= USERTYPE_COLUMN_BITMASK;

		if (!_setOriginalUserType) {
			_setOriginalUserType = true;

			_originalUserType = _userType;
		}

		_userType = userType;
	}

	public int getOriginalUserType() {
		return _originalUserType;
	}

	@Override
	public String getOrgCode1() {
		if (_orgCode1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgCode1;
		}
	}

	@Override
	public void setOrgCode1(String orgCode1) {
		_columnBitmask |= ORGCODE1_COLUMN_BITMASK;

		if (_originalOrgCode1 == null) {
			_originalOrgCode1 = _orgCode1;
		}

		_orgCode1 = orgCode1;
	}

	public String getOriginalOrgCode1() {
		return GetterUtil.getString(_originalOrgCode1);
	}

	@Override
	public String getOrgCode2() {
		if (_orgCode2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgCode2;
		}
	}

	@Override
	public void setOrgCode2(String orgCode2) {
		_columnBitmask |= ORGCODE2_COLUMN_BITMASK;

		if (_originalOrgCode2 == null) {
			_originalOrgCode2 = _orgCode2;
		}

		_orgCode2 = orgCode2;
	}

	public String getOriginalOrgCode2() {
		return GetterUtil.getString(_originalOrgCode2);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserMapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserMappingImpl userMappingImpl = new UserMappingImpl();

		userMappingImpl.setId(getId());
		userMappingImpl.setName(getName());
		userMappingImpl.setUserId(getUserId());
		userMappingImpl.setUserType(getUserType());
		userMappingImpl.setOrgCode1(getOrgCode1());
		userMappingImpl.setOrgCode2(getOrgCode2());

		userMappingImpl.resetOriginalValues();

		return userMappingImpl;
	}

	@Override
	public int compareTo(UserMapping userMapping) {
		long primaryKey = userMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserMapping)) {
			return false;
		}

		UserMapping userMapping = (UserMapping)obj;

		long primaryKey = userMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserMappingModelImpl userMappingModelImpl = this;

		userMappingModelImpl._originalUserId = userMappingModelImpl._userId;

		userMappingModelImpl._setOriginalUserId = false;

		userMappingModelImpl._originalUserType = userMappingModelImpl._userType;

		userMappingModelImpl._setOriginalUserType = false;

		userMappingModelImpl._originalOrgCode1 = userMappingModelImpl._orgCode1;

		userMappingModelImpl._originalOrgCode2 = userMappingModelImpl._orgCode2;

		userMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserMapping> toCacheModel() {
		UserMappingCacheModel userMappingCacheModel = new UserMappingCacheModel();

		userMappingCacheModel.id = getId();

		userMappingCacheModel.name = getName();

		String name = userMappingCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			userMappingCacheModel.name = null;
		}

		userMappingCacheModel.userId = getUserId();

		userMappingCacheModel.userType = getUserType();

		userMappingCacheModel.orgCode1 = getOrgCode1();

		String orgCode1 = userMappingCacheModel.orgCode1;

		if ((orgCode1 != null) && (orgCode1.length() == 0)) {
			userMappingCacheModel.orgCode1 = null;
		}

		userMappingCacheModel.orgCode2 = getOrgCode2();

		String orgCode2 = userMappingCacheModel.orgCode2;

		if ((orgCode2 != null) && (orgCode2.length() == 0)) {
			userMappingCacheModel.orgCode2 = null;
		}

		return userMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userType=");
		sb.append(getUserType());
		sb.append(", orgCode1=");
		sb.append(getOrgCode1());
		sb.append(", orgCode2=");
		sb.append(getOrgCode2());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.cmon.user.dao.model.UserMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userType</column-name><column-value><![CDATA[");
		sb.append(getUserType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgCode1</column-name><column-value><![CDATA[");
		sb.append(getOrgCode1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgCode2</column-name><column-value><![CDATA[");
		sb.append(getOrgCode2());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserMapping.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserMapping.class
		};
	private long _id;
	private String _name;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private int _userType;
	private int _originalUserType;
	private boolean _setOriginalUserType;
	private String _orgCode1;
	private String _originalOrgCode1;
	private String _orgCode2;
	private String _originalOrgCode2;
	private long _columnBitmask;
	private UserMapping _escapedModel;
}