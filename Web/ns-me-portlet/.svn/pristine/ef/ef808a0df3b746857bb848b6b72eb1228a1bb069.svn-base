/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.cmon.dm.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.cmon.dm.dao.model.DATAITEM;
import vn.dtt.cmon.dm.dao.model.DATAITEMModel;
import vn.dtt.cmon.dm.dao.model.DATAITEMSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DATAITEM service. Represents a row in the &quot;DM_DATAITEM&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.cmon.dm.dao.model.DATAITEMModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DATAITEMImpl}.
 * </p>
 *
 * @author khoa.vu
 * @see DATAITEMImpl
 * @see vn.dtt.cmon.dm.dao.model.DATAITEM
 * @see vn.dtt.cmon.dm.dao.model.DATAITEMModel
 * @generated
 */
@JSON(strict = true)
public class DATAITEMModelImpl extends BaseModelImpl<DATAITEM>
	implements DATAITEMModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d a t a i t e m model instance should use the {@link vn.dtt.cmon.dm.dao.model.DATAITEM} interface instead.
	 */
	public static final String TABLE_NAME = "DM_DATAITEM";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "DATAGROUPID", Types.BIGINT },
			{ "CODE", Types.VARCHAR },
			{ "NODE_1", Types.VARCHAR },
			{ "NODE_2", Types.VARCHAR },
			{ "NODE_3", Types.VARCHAR },
			{ "NODE_4", Types.VARCHAR },
			{ "LEVEL", Types.INTEGER },
			{ "NAME", Types.VARCHAR },
			{ "DESCRIPTION", Types.VARCHAR },
			{ "STATUS", Types.INTEGER },
			{ "VALIDATEDFROM", Types.TIMESTAMP },
			{ "VALIDATEDTO", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_DATAITEM (ID LONG not null primary key,DATAGROUPID LONG,CODE VARCHAR(75) null,NODE_1 VARCHAR(75) null,NODE_2 VARCHAR(75) null,NODE_3 VARCHAR(75) null,NODE_4 VARCHAR(75) null,LEVEL INTEGER,NAME VARCHAR(75) null,DESCRIPTION VARCHAR(75) null,STATUS INTEGER,VALIDATEDFROM DATE null,VALIDATEDTO DATE null)";
	public static final String TABLE_SQL_DROP = "drop table DM_DATAITEM";
	public static final String ORDER_BY_JPQL = " ORDER BY dataitem.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_DATAITEM.NAME ASC";
	public static final String DATA_SOURCE = "dmDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.cmon.dm.dao.model.DATAITEM"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.cmon.dm.dao.model.DATAITEM"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.cmon.dm.dao.model.DATAITEM"),
			true);
	public static long DATAGROUPID_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;
	public static long NODE1_COLUMN_BITMASK = 4L;
	public static long NODE2_COLUMN_BITMASK = 8L;
	public static long NODE3_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DATAITEM toModel(DATAITEMSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DATAITEM model = new DATAITEMImpl();

		model.setId(soapModel.getId());
		model.setDataGroupId(soapModel.getDataGroupId());
		model.setCode(soapModel.getCode());
		model.setNode1(soapModel.getNode1());
		model.setNode2(soapModel.getNode2());
		model.setNode3(soapModel.getNode3());
		model.setNode4(soapModel.getNode4());
		model.setLevel(soapModel.getLevel());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setStatus(soapModel.getStatus());
		model.setValidatedFrom(soapModel.getValidatedFrom());
		model.setValidatedTo(soapModel.getValidatedTo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DATAITEM> toModels(DATAITEMSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DATAITEM> models = new ArrayList<DATAITEM>(soapModels.length);

		for (DATAITEMSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.cmon.dm.dao.model.DATAITEM"));

	public DATAITEMModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DATAITEM.class;
	}

	@Override
	public String getModelClassName() {
		return DATAITEM.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("dataGroupId", getDataGroupId());
		attributes.put("code", getCode());
		attributes.put("node1", getNode1());
		attributes.put("node2", getNode2());
		attributes.put("node3", getNode3());
		attributes.put("node4", getNode4());
		attributes.put("level", getLevel());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("status", getStatus());
		attributes.put("validatedFrom", getValidatedFrom());
		attributes.put("validatedTo", getValidatedTo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long dataGroupId = (Long)attributes.get("dataGroupId");

		if (dataGroupId != null) {
			setDataGroupId(dataGroupId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String node1 = (String)attributes.get("node1");

		if (node1 != null) {
			setNode1(node1);
		}

		String node2 = (String)attributes.get("node2");

		if (node2 != null) {
			setNode2(node2);
		}

		String node3 = (String)attributes.get("node3");

		if (node3 != null) {
			setNode3(node3);
		}

		String node4 = (String)attributes.get("node4");

		if (node4 != null) {
			setNode4(node4);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date validatedFrom = (Date)attributes.get("validatedFrom");

		if (validatedFrom != null) {
			setValidatedFrom(validatedFrom);
		}

		Date validatedTo = (Date)attributes.get("validatedTo");

		if (validatedTo != null) {
			setValidatedTo(validatedTo);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getDataGroupId() {
		return _dataGroupId;
	}

	@Override
	public void setDataGroupId(long dataGroupId) {
		_columnBitmask |= DATAGROUPID_COLUMN_BITMASK;

		if (!_setOriginalDataGroupId) {
			_setOriginalDataGroupId = true;

			_originalDataGroupId = _dataGroupId;
		}

		_dataGroupId = dataGroupId;
	}

	public long getOriginalDataGroupId() {
		return _originalDataGroupId;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getNode1() {
		if (_node1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node1;
		}
	}

	@Override
	public void setNode1(String node1) {
		_columnBitmask |= NODE1_COLUMN_BITMASK;

		if (_originalNode1 == null) {
			_originalNode1 = _node1;
		}

		_node1 = node1;
	}

	public String getOriginalNode1() {
		return GetterUtil.getString(_originalNode1);
	}

	@JSON
	@Override
	public String getNode2() {
		if (_node2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node2;
		}
	}

	@Override
	public void setNode2(String node2) {
		_columnBitmask |= NODE2_COLUMN_BITMASK;

		if (_originalNode2 == null) {
			_originalNode2 = _node2;
		}

		_node2 = node2;
	}

	public String getOriginalNode2() {
		return GetterUtil.getString(_originalNode2);
	}

	@JSON
	@Override
	public String getNode3() {
		if (_node3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node3;
		}
	}

	@Override
	public void setNode3(String node3) {
		_columnBitmask |= NODE3_COLUMN_BITMASK;

		if (_originalNode3 == null) {
			_originalNode3 = _node3;
		}

		_node3 = node3;
	}

	public String getOriginalNode3() {
		return GetterUtil.getString(_originalNode3);
	}

	@JSON
	@Override
	public String getNode4() {
		if (_node4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node4;
		}
	}

	@Override
	public void setNode4(String node4) {
		_node4 = node4;
	}

	@JSON
	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_level = level;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getValidatedFrom() {
		return _validatedFrom;
	}

	@Override
	public void setValidatedFrom(Date validatedFrom) {
		_validatedFrom = validatedFrom;
	}

	@JSON
	@Override
	public Date getValidatedTo() {
		return _validatedTo;
	}

	@Override
	public void setValidatedTo(Date validatedTo) {
		_validatedTo = validatedTo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DATAITEM.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DATAITEM toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DATAITEM)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DATAITEMImpl dataitemImpl = new DATAITEMImpl();

		dataitemImpl.setId(getId());
		dataitemImpl.setDataGroupId(getDataGroupId());
		dataitemImpl.setCode(getCode());
		dataitemImpl.setNode1(getNode1());
		dataitemImpl.setNode2(getNode2());
		dataitemImpl.setNode3(getNode3());
		dataitemImpl.setNode4(getNode4());
		dataitemImpl.setLevel(getLevel());
		dataitemImpl.setName(getName());
		dataitemImpl.setDescription(getDescription());
		dataitemImpl.setStatus(getStatus());
		dataitemImpl.setValidatedFrom(getValidatedFrom());
		dataitemImpl.setValidatedTo(getValidatedTo());

		dataitemImpl.resetOriginalValues();

		return dataitemImpl;
	}

	@Override
	public int compareTo(DATAITEM dataitem) {
		int value = 0;

		value = getName().compareTo(dataitem.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DATAITEM)) {
			return false;
		}

		DATAITEM dataitem = (DATAITEM)obj;

		long primaryKey = dataitem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DATAITEMModelImpl dataitemModelImpl = this;

		dataitemModelImpl._originalDataGroupId = dataitemModelImpl._dataGroupId;

		dataitemModelImpl._setOriginalDataGroupId = false;

		dataitemModelImpl._originalNode1 = dataitemModelImpl._node1;

		dataitemModelImpl._originalNode2 = dataitemModelImpl._node2;

		dataitemModelImpl._originalNode3 = dataitemModelImpl._node3;

		dataitemModelImpl._originalName = dataitemModelImpl._name;

		dataitemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DATAITEM> toCacheModel() {
		DATAITEMCacheModel dataitemCacheModel = new DATAITEMCacheModel();

		dataitemCacheModel.id = getId();

		dataitemCacheModel.dataGroupId = getDataGroupId();

		dataitemCacheModel.code = getCode();

		String code = dataitemCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			dataitemCacheModel.code = null;
		}

		dataitemCacheModel.node1 = getNode1();

		String node1 = dataitemCacheModel.node1;

		if ((node1 != null) && (node1.length() == 0)) {
			dataitemCacheModel.node1 = null;
		}

		dataitemCacheModel.node2 = getNode2();

		String node2 = dataitemCacheModel.node2;

		if ((node2 != null) && (node2.length() == 0)) {
			dataitemCacheModel.node2 = null;
		}

		dataitemCacheModel.node3 = getNode3();

		String node3 = dataitemCacheModel.node3;

		if ((node3 != null) && (node3.length() == 0)) {
			dataitemCacheModel.node3 = null;
		}

		dataitemCacheModel.node4 = getNode4();

		String node4 = dataitemCacheModel.node4;

		if ((node4 != null) && (node4.length() == 0)) {
			dataitemCacheModel.node4 = null;
		}

		dataitemCacheModel.level = getLevel();

		dataitemCacheModel.name = getName();

		String name = dataitemCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dataitemCacheModel.name = null;
		}

		dataitemCacheModel.description = getDescription();

		String description = dataitemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dataitemCacheModel.description = null;
		}

		dataitemCacheModel.status = getStatus();

		Date validatedFrom = getValidatedFrom();

		if (validatedFrom != null) {
			dataitemCacheModel.validatedFrom = validatedFrom.getTime();
		}
		else {
			dataitemCacheModel.validatedFrom = Long.MIN_VALUE;
		}

		Date validatedTo = getValidatedTo();

		if (validatedTo != null) {
			dataitemCacheModel.validatedTo = validatedTo.getTime();
		}
		else {
			dataitemCacheModel.validatedTo = Long.MIN_VALUE;
		}

		return dataitemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", dataGroupId=");
		sb.append(getDataGroupId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", node1=");
		sb.append(getNode1());
		sb.append(", node2=");
		sb.append(getNode2());
		sb.append(", node3=");
		sb.append(getNode3());
		sb.append(", node4=");
		sb.append(getNode4());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", validatedFrom=");
		sb.append(getValidatedFrom());
		sb.append(", validatedTo=");
		sb.append(getValidatedTo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.cmon.dm.dao.model.DATAITEM");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataGroupId</column-name><column-value><![CDATA[");
		sb.append(getDataGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node1</column-name><column-value><![CDATA[");
		sb.append(getNode1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node2</column-name><column-value><![CDATA[");
		sb.append(getNode2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node3</column-name><column-value><![CDATA[");
		sb.append(getNode3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node4</column-name><column-value><![CDATA[");
		sb.append(getNode4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validatedFrom</column-name><column-value><![CDATA[");
		sb.append(getValidatedFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validatedTo</column-name><column-value><![CDATA[");
		sb.append(getValidatedTo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DATAITEM.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DATAITEM.class
		};
	private long _id;
	private long _dataGroupId;
	private long _originalDataGroupId;
	private boolean _setOriginalDataGroupId;
	private String _code;
	private String _node1;
	private String _originalNode1;
	private String _node2;
	private String _originalNode2;
	private String _node3;
	private String _originalNode3;
	private String _node4;
	private int _level;
	private String _name;
	private String _originalName;
	private String _description;
	private int _status;
	private Date _validatedFrom;
	private Date _validatedTo;
	private long _columnBitmask;
	private DATAITEM _escapedModel;
}