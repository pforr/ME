/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.sol.ns.tramcap.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach;
import vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSachModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the KeHoachNuocSach service. Represents a row in the &quot;ME_KEHOACHNUOCSACH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSachModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KeHoachNuocSachImpl}.
 * </p>
 *
 * @author khoa.vu
 * @see KeHoachNuocSachImpl
 * @see vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach
 * @see vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSachModel
 * @generated
 */
public class KeHoachNuocSachModelImpl extends BaseModelImpl<KeHoachNuocSach>
	implements KeHoachNuocSachModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ke hoach nuoc sach model instance should use the {@link vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach} interface instead.
	 */
	public static final String TABLE_NAME = "ME_KEHOACHNUOCSACH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "TRAMCAPNUOCID", Types.INTEGER },
			{ "NAM", Types.INTEGER },
			{ "SODAUNOIMOI", Types.INTEGER },
			{ "SONGUOIHUONGLOI", Types.INTEGER },
			{ "GHICHU", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ME_KEHOACHNUOCSACH (ID LONG not null primary key,TRAMCAPNUOCID INTEGER,NAM INTEGER,SODAUNOIMOI INTEGER,SONGUOIHUONGLOI INTEGER,GHICHU VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ME_KEHOACHNUOCSACH";
	public static final String ORDER_BY_JPQL = " ORDER BY keHoachNuocSach.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ME_KEHOACHNUOCSACH.ID DESC";
	public static final String DATA_SOURCE = "dmDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach"),
			true);
	public static long TRAMCAPNUOCID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach"));

	public KeHoachNuocSachModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KeHoachNuocSach.class;
	}

	@Override
	public String getModelClassName() {
		return KeHoachNuocSach.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("tramCapNuocId", getTramCapNuocId());
		attributes.put("nam", getNam());
		attributes.put("soDauNoiMoi", getSoDauNoiMoi());
		attributes.put("soNguoiHuongLoi", getSoNguoiHuongLoi());
		attributes.put("ghiChu", getGhiChu());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer tramCapNuocId = (Integer)attributes.get("tramCapNuocId");

		if (tramCapNuocId != null) {
			setTramCapNuocId(tramCapNuocId);
		}

		Integer nam = (Integer)attributes.get("nam");

		if (nam != null) {
			setNam(nam);
		}

		Integer soDauNoiMoi = (Integer)attributes.get("soDauNoiMoi");

		if (soDauNoiMoi != null) {
			setSoDauNoiMoi(soDauNoiMoi);
		}

		Integer soNguoiHuongLoi = (Integer)attributes.get("soNguoiHuongLoi");

		if (soNguoiHuongLoi != null) {
			setSoNguoiHuongLoi(soNguoiHuongLoi);
		}

		String ghiChu = (String)attributes.get("ghiChu");

		if (ghiChu != null) {
			setGhiChu(ghiChu);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public int getTramCapNuocId() {
		return _tramCapNuocId;
	}

	@Override
	public void setTramCapNuocId(int tramCapNuocId) {
		_columnBitmask |= TRAMCAPNUOCID_COLUMN_BITMASK;

		if (!_setOriginalTramCapNuocId) {
			_setOriginalTramCapNuocId = true;

			_originalTramCapNuocId = _tramCapNuocId;
		}

		_tramCapNuocId = tramCapNuocId;
	}

	public int getOriginalTramCapNuocId() {
		return _originalTramCapNuocId;
	}

	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		_nam = nam;
	}

	@Override
	public int getSoDauNoiMoi() {
		return _soDauNoiMoi;
	}

	@Override
	public void setSoDauNoiMoi(int soDauNoiMoi) {
		_soDauNoiMoi = soDauNoiMoi;
	}

	@Override
	public int getSoNguoiHuongLoi() {
		return _soNguoiHuongLoi;
	}

	@Override
	public void setSoNguoiHuongLoi(int soNguoiHuongLoi) {
		_soNguoiHuongLoi = soNguoiHuongLoi;
	}

	@Override
	public String getGhiChu() {
		if (_ghiChu == null) {
			return StringPool.BLANK;
		}
		else {
			return _ghiChu;
		}
	}

	@Override
	public void setGhiChu(String ghiChu) {
		_ghiChu = ghiChu;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KeHoachNuocSach.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KeHoachNuocSach toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KeHoachNuocSach)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KeHoachNuocSachImpl keHoachNuocSachImpl = new KeHoachNuocSachImpl();

		keHoachNuocSachImpl.setId(getId());
		keHoachNuocSachImpl.setTramCapNuocId(getTramCapNuocId());
		keHoachNuocSachImpl.setNam(getNam());
		keHoachNuocSachImpl.setSoDauNoiMoi(getSoDauNoiMoi());
		keHoachNuocSachImpl.setSoNguoiHuongLoi(getSoNguoiHuongLoi());
		keHoachNuocSachImpl.setGhiChu(getGhiChu());

		keHoachNuocSachImpl.resetOriginalValues();

		return keHoachNuocSachImpl;
	}

	@Override
	public int compareTo(KeHoachNuocSach keHoachNuocSach) {
		int value = 0;

		if (getId() < keHoachNuocSach.getId()) {
			value = -1;
		}
		else if (getId() > keHoachNuocSach.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KeHoachNuocSach)) {
			return false;
		}

		KeHoachNuocSach keHoachNuocSach = (KeHoachNuocSach)obj;

		long primaryKey = keHoachNuocSach.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KeHoachNuocSachModelImpl keHoachNuocSachModelImpl = this;

		keHoachNuocSachModelImpl._originalTramCapNuocId = keHoachNuocSachModelImpl._tramCapNuocId;

		keHoachNuocSachModelImpl._setOriginalTramCapNuocId = false;

		keHoachNuocSachModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KeHoachNuocSach> toCacheModel() {
		KeHoachNuocSachCacheModel keHoachNuocSachCacheModel = new KeHoachNuocSachCacheModel();

		keHoachNuocSachCacheModel.id = getId();

		keHoachNuocSachCacheModel.tramCapNuocId = getTramCapNuocId();

		keHoachNuocSachCacheModel.nam = getNam();

		keHoachNuocSachCacheModel.soDauNoiMoi = getSoDauNoiMoi();

		keHoachNuocSachCacheModel.soNguoiHuongLoi = getSoNguoiHuongLoi();

		keHoachNuocSachCacheModel.ghiChu = getGhiChu();

		String ghiChu = keHoachNuocSachCacheModel.ghiChu;

		if ((ghiChu != null) && (ghiChu.length() == 0)) {
			keHoachNuocSachCacheModel.ghiChu = null;
		}

		return keHoachNuocSachCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", tramCapNuocId=");
		sb.append(getTramCapNuocId());
		sb.append(", nam=");
		sb.append(getNam());
		sb.append(", soDauNoiMoi=");
		sb.append(getSoDauNoiMoi());
		sb.append(", soNguoiHuongLoi=");
		sb.append(getSoNguoiHuongLoi());
		sb.append(", ghiChu=");
		sb.append(getGhiChu());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.sol.ns.tramcap.dao.model.KeHoachNuocSach");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tramCapNuocId</column-name><column-value><![CDATA[");
		sb.append(getTramCapNuocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nam</column-name><column-value><![CDATA[");
		sb.append(getNam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soDauNoiMoi</column-name><column-value><![CDATA[");
		sb.append(getSoDauNoiMoi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soNguoiHuongLoi</column-name><column-value><![CDATA[");
		sb.append(getSoNguoiHuongLoi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ghiChu</column-name><column-value><![CDATA[");
		sb.append(getGhiChu());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KeHoachNuocSach.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KeHoachNuocSach.class
		};
	private long _id;
	private int _tramCapNuocId;
	private int _originalTramCapNuocId;
	private boolean _setOriginalTramCapNuocId;
	private int _nam;
	private int _soDauNoiMoi;
	private int _soNguoiHuongLoi;
	private String _ghiChu;
	private long _columnBitmask;
	private KeHoachNuocSach _escapedModel;
}