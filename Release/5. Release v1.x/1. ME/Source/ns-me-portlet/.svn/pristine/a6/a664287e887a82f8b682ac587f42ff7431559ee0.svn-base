/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.cmon.dm.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.cmon.dm.dao.model.DATAGROUP;
import vn.dtt.cmon.dm.dao.model.DATAGROUPModel;
import vn.dtt.cmon.dm.dao.model.DATAGROUPSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DATAGROUP service. Represents a row in the &quot;DM_DATAGROUP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.cmon.dm.dao.model.DATAGROUPModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DATAGROUPImpl}.
 * </p>
 *
 * @author khoa.vu
 * @see DATAGROUPImpl
 * @see vn.dtt.cmon.dm.dao.model.DATAGROUP
 * @see vn.dtt.cmon.dm.dao.model.DATAGROUPModel
 * @generated
 */
@JSON(strict = true)
public class DATAGROUPModelImpl extends BaseModelImpl<DATAGROUP>
	implements DATAGROUPModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d a t a g r o u p model instance should use the {@link vn.dtt.cmon.dm.dao.model.DATAGROUP} interface instead.
	 */
	public static final String TABLE_NAME = "DM_DATAGROUP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "CODE", Types.VARCHAR },
			{ "NAME", Types.VARCHAR },
			{ "DESCRIPTION", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_DATAGROUP (ID LONG not null primary key,CODE VARCHAR(75) null,NAME VARCHAR(75) null,DESCRIPTION VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_DATAGROUP";
	public static final String ORDER_BY_JPQL = " ORDER BY datagroup.name ASC, datagroup.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_DATAGROUP.NAME ASC, DM_DATAGROUP.ID ASC";
	public static final String DATA_SOURCE = "dmDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.cmon.dm.dao.model.DATAGROUP"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.cmon.dm.dao.model.DATAGROUP"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DATAGROUP toModel(DATAGROUPSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DATAGROUP model = new DATAGROUPImpl();

		model.setId(soapModel.getId());
		model.setCode(soapModel.getCode());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DATAGROUP> toModels(DATAGROUPSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DATAGROUP> models = new ArrayList<DATAGROUP>(soapModels.length);

		for (DATAGROUPSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.cmon.dm.dao.model.DATAGROUP"));

	public DATAGROUPModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DATAGROUP.class;
	}

	@Override
	public String getModelClassName() {
		return DATAGROUP.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("code", getCode());
		attributes.put("name", getName());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DATAGROUP.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DATAGROUP toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DATAGROUP)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DATAGROUPImpl datagroupImpl = new DATAGROUPImpl();

		datagroupImpl.setId(getId());
		datagroupImpl.setCode(getCode());
		datagroupImpl.setName(getName());
		datagroupImpl.setDescription(getDescription());

		datagroupImpl.resetOriginalValues();

		return datagroupImpl;
	}

	@Override
	public int compareTo(DATAGROUP datagroup) {
		int value = 0;

		value = getName().compareTo(datagroup.getName());

		if (value != 0) {
			return value;
		}

		if (getId() < datagroup.getId()) {
			value = -1;
		}
		else if (getId() > datagroup.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DATAGROUP)) {
			return false;
		}

		DATAGROUP datagroup = (DATAGROUP)obj;

		long primaryKey = datagroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DATAGROUP> toCacheModel() {
		DATAGROUPCacheModel datagroupCacheModel = new DATAGROUPCacheModel();

		datagroupCacheModel.id = getId();

		datagroupCacheModel.code = getCode();

		String code = datagroupCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			datagroupCacheModel.code = null;
		}

		datagroupCacheModel.name = getName();

		String name = datagroupCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			datagroupCacheModel.name = null;
		}

		datagroupCacheModel.description = getDescription();

		String description = datagroupCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			datagroupCacheModel.description = null;
		}

		return datagroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.cmon.dm.dao.model.DATAGROUP");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DATAGROUP.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DATAGROUP.class
		};
	private long _id;
	private String _code;
	private String _name;
	private String _description;
	private DATAGROUP _escapedModel;
}