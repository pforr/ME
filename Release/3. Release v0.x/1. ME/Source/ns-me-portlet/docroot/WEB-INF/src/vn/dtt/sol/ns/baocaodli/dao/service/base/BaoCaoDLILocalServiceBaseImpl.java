/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.sol.ns.baocaodli.dao.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import vn.dtt.sol.ns.baocaodli.dao.model.BaoCaoDLI;
import vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLIFinder;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLIPersistence;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLITongHopFinder;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLITongHopPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bao cao d l i local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.dtt.sol.ns.baocaodli.dao.service.impl.BaoCaoDLILocalServiceImpl}.
 * </p>
 *
 * @author HuyMQ
 * @see vn.dtt.sol.ns.baocaodli.dao.service.impl.BaoCaoDLILocalServiceImpl
 * @see vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalServiceUtil
 * @generated
 */
public abstract class BaoCaoDLILocalServiceBaseImpl extends BaseLocalServiceImpl
	implements BaoCaoDLILocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalServiceUtil} to access the bao cao d l i local service.
	 */

	/**
	 * Adds the bao cao d l i to the database. Also notifies the appropriate model listeners.
	 *
	 * @param baoCaoDLI the bao cao d l i
	 * @return the bao cao d l i that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BaoCaoDLI addBaoCaoDLI(BaoCaoDLI baoCaoDLI)
		throws SystemException {
		baoCaoDLI.setNew(true);

		return baoCaoDLIPersistence.update(baoCaoDLI);
	}

	/**
	 * Creates a new bao cao d l i with the primary key. Does not add the bao cao d l i to the database.
	 *
	 * @param id the primary key for the new bao cao d l i
	 * @return the new bao cao d l i
	 */
	@Override
	public BaoCaoDLI createBaoCaoDLI(long id) {
		return baoCaoDLIPersistence.create(id);
	}

	/**
	 * Deletes the bao cao d l i with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the bao cao d l i
	 * @return the bao cao d l i that was removed
	 * @throws PortalException if a bao cao d l i with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BaoCaoDLI deleteBaoCaoDLI(long id)
		throws PortalException, SystemException {
		return baoCaoDLIPersistence.remove(id);
	}

	/**
	 * Deletes the bao cao d l i from the database. Also notifies the appropriate model listeners.
	 *
	 * @param baoCaoDLI the bao cao d l i
	 * @return the bao cao d l i that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BaoCaoDLI deleteBaoCaoDLI(BaoCaoDLI baoCaoDLI)
		throws SystemException {
		return baoCaoDLIPersistence.remove(baoCaoDLI);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BaoCaoDLI.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return baoCaoDLIPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.sol.ns.baocaodli.dao.model.impl.BaoCaoDLIModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return baoCaoDLIPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.sol.ns.baocaodli.dao.model.impl.BaoCaoDLIModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return baoCaoDLIPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return baoCaoDLIPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return baoCaoDLIPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BaoCaoDLI fetchBaoCaoDLI(long id) throws SystemException {
		return baoCaoDLIPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the bao cao d l i with the primary key.
	 *
	 * @param id the primary key of the bao cao d l i
	 * @return the bao cao d l i
	 * @throws PortalException if a bao cao d l i with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public BaoCaoDLI getBaoCaoDLI(long id)
		throws PortalException, SystemException {
		return baoCaoDLIPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return baoCaoDLIPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the bao cao d l is.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.sol.ns.baocaodli.dao.model.impl.BaoCaoDLIModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of bao cao d l is
	 * @param end the upper bound of the range of bao cao d l is (not inclusive)
	 * @return the range of bao cao d l is
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<BaoCaoDLI> getBaoCaoDLIs(int start, int end)
		throws SystemException {
		return baoCaoDLIPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of bao cao d l is.
	 *
	 * @return the number of bao cao d l is
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBaoCaoDLIsCount() throws SystemException {
		return baoCaoDLIPersistence.countAll();
	}

	/**
	 * Updates the bao cao d l i in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param baoCaoDLI the bao cao d l i
	 * @return the bao cao d l i that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BaoCaoDLI updateBaoCaoDLI(BaoCaoDLI baoCaoDLI)
		throws SystemException {
		return baoCaoDLIPersistence.update(baoCaoDLI);
	}

	/**
	 * Returns the bao cao d l i local service.
	 *
	 * @return the bao cao d l i local service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService getBaoCaoDLILocalService() {
		return baoCaoDLILocalService;
	}

	/**
	 * Sets the bao cao d l i local service.
	 *
	 * @param baoCaoDLILocalService the bao cao d l i local service
	 */
	public void setBaoCaoDLILocalService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService baoCaoDLILocalService) {
		this.baoCaoDLILocalService = baoCaoDLILocalService;
	}

	/**
	 * Returns the bao cao d l i remote service.
	 *
	 * @return the bao cao d l i remote service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService getBaoCaoDLIService() {
		return baoCaoDLIService;
	}

	/**
	 * Sets the bao cao d l i remote service.
	 *
	 * @param baoCaoDLIService the bao cao d l i remote service
	 */
	public void setBaoCaoDLIService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService baoCaoDLIService) {
		this.baoCaoDLIService = baoCaoDLIService;
	}

	/**
	 * Returns the bao cao d l i persistence.
	 *
	 * @return the bao cao d l i persistence
	 */
	public BaoCaoDLIPersistence getBaoCaoDLIPersistence() {
		return baoCaoDLIPersistence;
	}

	/**
	 * Sets the bao cao d l i persistence.
	 *
	 * @param baoCaoDLIPersistence the bao cao d l i persistence
	 */
	public void setBaoCaoDLIPersistence(
		BaoCaoDLIPersistence baoCaoDLIPersistence) {
		this.baoCaoDLIPersistence = baoCaoDLIPersistence;
	}

	/**
	 * Returns the bao cao d l i finder.
	 *
	 * @return the bao cao d l i finder
	 */
	public BaoCaoDLIFinder getBaoCaoDLIFinder() {
		return baoCaoDLIFinder;
	}

	/**
	 * Sets the bao cao d l i finder.
	 *
	 * @param baoCaoDLIFinder the bao cao d l i finder
	 */
	public void setBaoCaoDLIFinder(BaoCaoDLIFinder baoCaoDLIFinder) {
		this.baoCaoDLIFinder = baoCaoDLIFinder;
	}

	/**
	 * Returns the bao cao d l i tong hop local service.
	 *
	 * @return the bao cao d l i tong hop local service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService getBaoCaoDLITongHopLocalService() {
		return baoCaoDLITongHopLocalService;
	}

	/**
	 * Sets the bao cao d l i tong hop local service.
	 *
	 * @param baoCaoDLITongHopLocalService the bao cao d l i tong hop local service
	 */
	public void setBaoCaoDLITongHopLocalService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService baoCaoDLITongHopLocalService) {
		this.baoCaoDLITongHopLocalService = baoCaoDLITongHopLocalService;
	}

	/**
	 * Returns the bao cao d l i tong hop remote service.
	 *
	 * @return the bao cao d l i tong hop remote service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService getBaoCaoDLITongHopService() {
		return baoCaoDLITongHopService;
	}

	/**
	 * Sets the bao cao d l i tong hop remote service.
	 *
	 * @param baoCaoDLITongHopService the bao cao d l i tong hop remote service
	 */
	public void setBaoCaoDLITongHopService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService baoCaoDLITongHopService) {
		this.baoCaoDLITongHopService = baoCaoDLITongHopService;
	}

	/**
	 * Returns the bao cao d l i tong hop persistence.
	 *
	 * @return the bao cao d l i tong hop persistence
	 */
	public BaoCaoDLITongHopPersistence getBaoCaoDLITongHopPersistence() {
		return baoCaoDLITongHopPersistence;
	}

	/**
	 * Sets the bao cao d l i tong hop persistence.
	 *
	 * @param baoCaoDLITongHopPersistence the bao cao d l i tong hop persistence
	 */
	public void setBaoCaoDLITongHopPersistence(
		BaoCaoDLITongHopPersistence baoCaoDLITongHopPersistence) {
		this.baoCaoDLITongHopPersistence = baoCaoDLITongHopPersistence;
	}

	/**
	 * Returns the bao cao d l i tong hop finder.
	 *
	 * @return the bao cao d l i tong hop finder
	 */
	public BaoCaoDLITongHopFinder getBaoCaoDLITongHopFinder() {
		return baoCaoDLITongHopFinder;
	}

	/**
	 * Sets the bao cao d l i tong hop finder.
	 *
	 * @param baoCaoDLITongHopFinder the bao cao d l i tong hop finder
	 */
	public void setBaoCaoDLITongHopFinder(
		BaoCaoDLITongHopFinder baoCaoDLITongHopFinder) {
		this.baoCaoDLITongHopFinder = baoCaoDLITongHopFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("vn.dtt.sol.ns.baocaodli.dao.model.BaoCaoDLI",
			baoCaoDLILocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"vn.dtt.sol.ns.baocaodli.dao.model.BaoCaoDLI");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BaoCaoDLI.class;
	}

	protected String getModelClassName() {
		return BaoCaoDLI.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = baoCaoDLIPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService baoCaoDLILocalService;
	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService baoCaoDLIService;
	@BeanReference(type = BaoCaoDLIPersistence.class)
	protected BaoCaoDLIPersistence baoCaoDLIPersistence;
	@BeanReference(type = BaoCaoDLIFinder.class)
	protected BaoCaoDLIFinder baoCaoDLIFinder;
	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService baoCaoDLITongHopLocalService;
	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService baoCaoDLITongHopService;
	@BeanReference(type = BaoCaoDLITongHopPersistence.class)
	protected BaoCaoDLITongHopPersistence baoCaoDLITongHopPersistence;
	@BeanReference(type = BaoCaoDLITongHopFinder.class)
	protected BaoCaoDLITongHopFinder baoCaoDLITongHopFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BaoCaoDLILocalServiceClpInvoker _clpInvoker = new BaoCaoDLILocalServiceClpInvoker();
}