/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.sol.ns.baocaodli.dao.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import vn.dtt.sol.ns.baocaodli.dao.model.BaoCaoDLI;
import vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLIFinder;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLIPersistence;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLITongHopFinder;
import vn.dtt.sol.ns.baocaodli.dao.service.persistence.BaoCaoDLITongHopPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bao cao d l i remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.dtt.sol.ns.baocaodli.dao.service.impl.BaoCaoDLIServiceImpl}.
 * </p>
 *
 * @author HuyMQ
 * @see vn.dtt.sol.ns.baocaodli.dao.service.impl.BaoCaoDLIServiceImpl
 * @see vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIServiceUtil
 * @generated
 */
public abstract class BaoCaoDLIServiceBaseImpl extends BaseServiceImpl
	implements BaoCaoDLIService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIServiceUtil} to access the bao cao d l i remote service.
	 */

	/**
	 * Returns the bao cao d l i local service.
	 *
	 * @return the bao cao d l i local service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService getBaoCaoDLILocalService() {
		return baoCaoDLILocalService;
	}

	/**
	 * Sets the bao cao d l i local service.
	 *
	 * @param baoCaoDLILocalService the bao cao d l i local service
	 */
	public void setBaoCaoDLILocalService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService baoCaoDLILocalService) {
		this.baoCaoDLILocalService = baoCaoDLILocalService;
	}

	/**
	 * Returns the bao cao d l i remote service.
	 *
	 * @return the bao cao d l i remote service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService getBaoCaoDLIService() {
		return baoCaoDLIService;
	}

	/**
	 * Sets the bao cao d l i remote service.
	 *
	 * @param baoCaoDLIService the bao cao d l i remote service
	 */
	public void setBaoCaoDLIService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService baoCaoDLIService) {
		this.baoCaoDLIService = baoCaoDLIService;
	}

	/**
	 * Returns the bao cao d l i persistence.
	 *
	 * @return the bao cao d l i persistence
	 */
	public BaoCaoDLIPersistence getBaoCaoDLIPersistence() {
		return baoCaoDLIPersistence;
	}

	/**
	 * Sets the bao cao d l i persistence.
	 *
	 * @param baoCaoDLIPersistence the bao cao d l i persistence
	 */
	public void setBaoCaoDLIPersistence(
		BaoCaoDLIPersistence baoCaoDLIPersistence) {
		this.baoCaoDLIPersistence = baoCaoDLIPersistence;
	}

	/**
	 * Returns the bao cao d l i finder.
	 *
	 * @return the bao cao d l i finder
	 */
	public BaoCaoDLIFinder getBaoCaoDLIFinder() {
		return baoCaoDLIFinder;
	}

	/**
	 * Sets the bao cao d l i finder.
	 *
	 * @param baoCaoDLIFinder the bao cao d l i finder
	 */
	public void setBaoCaoDLIFinder(BaoCaoDLIFinder baoCaoDLIFinder) {
		this.baoCaoDLIFinder = baoCaoDLIFinder;
	}

	/**
	 * Returns the bao cao d l i tong hop local service.
	 *
	 * @return the bao cao d l i tong hop local service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService getBaoCaoDLITongHopLocalService() {
		return baoCaoDLITongHopLocalService;
	}

	/**
	 * Sets the bao cao d l i tong hop local service.
	 *
	 * @param baoCaoDLITongHopLocalService the bao cao d l i tong hop local service
	 */
	public void setBaoCaoDLITongHopLocalService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService baoCaoDLITongHopLocalService) {
		this.baoCaoDLITongHopLocalService = baoCaoDLITongHopLocalService;
	}

	/**
	 * Returns the bao cao d l i tong hop remote service.
	 *
	 * @return the bao cao d l i tong hop remote service
	 */
	public vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService getBaoCaoDLITongHopService() {
		return baoCaoDLITongHopService;
	}

	/**
	 * Sets the bao cao d l i tong hop remote service.
	 *
	 * @param baoCaoDLITongHopService the bao cao d l i tong hop remote service
	 */
	public void setBaoCaoDLITongHopService(
		vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService baoCaoDLITongHopService) {
		this.baoCaoDLITongHopService = baoCaoDLITongHopService;
	}

	/**
	 * Returns the bao cao d l i tong hop persistence.
	 *
	 * @return the bao cao d l i tong hop persistence
	 */
	public BaoCaoDLITongHopPersistence getBaoCaoDLITongHopPersistence() {
		return baoCaoDLITongHopPersistence;
	}

	/**
	 * Sets the bao cao d l i tong hop persistence.
	 *
	 * @param baoCaoDLITongHopPersistence the bao cao d l i tong hop persistence
	 */
	public void setBaoCaoDLITongHopPersistence(
		BaoCaoDLITongHopPersistence baoCaoDLITongHopPersistence) {
		this.baoCaoDLITongHopPersistence = baoCaoDLITongHopPersistence;
	}

	/**
	 * Returns the bao cao d l i tong hop finder.
	 *
	 * @return the bao cao d l i tong hop finder
	 */
	public BaoCaoDLITongHopFinder getBaoCaoDLITongHopFinder() {
		return baoCaoDLITongHopFinder;
	}

	/**
	 * Sets the bao cao d l i tong hop finder.
	 *
	 * @param baoCaoDLITongHopFinder the bao cao d l i tong hop finder
	 */
	public void setBaoCaoDLITongHopFinder(
		BaoCaoDLITongHopFinder baoCaoDLITongHopFinder) {
		this.baoCaoDLITongHopFinder = baoCaoDLITongHopFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BaoCaoDLI.class;
	}

	protected String getModelClassName() {
		return BaoCaoDLI.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = baoCaoDLIPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLILocalService baoCaoDLILocalService;
	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLIService baoCaoDLIService;
	@BeanReference(type = BaoCaoDLIPersistence.class)
	protected BaoCaoDLIPersistence baoCaoDLIPersistence;
	@BeanReference(type = BaoCaoDLIFinder.class)
	protected BaoCaoDLIFinder baoCaoDLIFinder;
	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopLocalService baoCaoDLITongHopLocalService;
	@BeanReference(type = vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService.class)
	protected vn.dtt.sol.ns.baocaodli.dao.service.BaoCaoDLITongHopService baoCaoDLITongHopService;
	@BeanReference(type = BaoCaoDLITongHopPersistence.class)
	protected BaoCaoDLITongHopPersistence baoCaoDLITongHopPersistence;
	@BeanReference(type = BaoCaoDLITongHopFinder.class)
	protected BaoCaoDLITongHopFinder baoCaoDLITongHopFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BaoCaoDLIServiceClpInvoker _clpInvoker = new BaoCaoDLIServiceClpInvoker();
}