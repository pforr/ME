/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.sol.ns.kehoachdaunam.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam;
import vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNamModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the KeHoachDauNam service. Represents a row in the &quot;ME_KEHOACHNUOCSACH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KeHoachDauNamImpl}.
 * </p>
 *
 * @author HANT
 * @see KeHoachDauNamImpl
 * @see vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam
 * @see vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNamModel
 * @generated
 */
public class KeHoachDauNamModelImpl extends BaseModelImpl<KeHoachDauNam>
	implements KeHoachDauNamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ke hoach dau nam model instance should use the {@link vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam} interface instead.
	 */
	public static final String TABLE_NAME = "ME_KEHOACHNUOCSACH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "TRAMCAPNUOCID", Types.BIGINT },
			{ "NAM", Types.BIGINT },
			{ "SODAUNOIMOI", Types.BIGINT },
			{ "SOHOHUONGLOI", Types.BIGINT },
			{ "SONGUOIHUONGLOI", Types.BIGINT },
			{ "GHICHU", Types.VARCHAR },
			{ "BAOCAODLI", Types.BIGINT },
			{ "NGAYTAO", Types.TIMESTAMP },
			{ "IDNGUOITAO", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ME_KEHOACHNUOCSACH (ID LONG not null primary key,TRAMCAPNUOCID LONG,NAM LONG,SODAUNOIMOI LONG,SOHOHUONGLOI LONG,SONGUOIHUONGLOI LONG,GHICHU VARCHAR(75) null,BAOCAODLI LONG,NGAYTAO DATE null,IDNGUOITAO LONG)";
	public static final String TABLE_SQL_DROP = "drop table ME_KEHOACHNUOCSACH";
	public static final String ORDER_BY_JPQL = " ORDER BY keHoachDauNam.nam ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ME_KEHOACHNUOCSACH.NAM ASC";
	public static final String DATA_SOURCE = "dmDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam"),
			true);
	public static long BAOCAODLI_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static long IDNGUOITAO_COLUMN_BITMASK = 4L;
	public static long NAM_COLUMN_BITMASK = 8L;
	public static long NGAYTAO_COLUMN_BITMASK = 16L;
	public static long TRAMCAPNUOCID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam"));

	public KeHoachDauNamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KeHoachDauNam.class;
	}

	@Override
	public String getModelClassName() {
		return KeHoachDauNam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("tramCapNuocId", getTramCapNuocId());
		attributes.put("nam", getNam());
		attributes.put("soDauNoiMoi", getSoDauNoiMoi());
		attributes.put("soHoHuongLoi", getSoHoHuongLoi());
		attributes.put("soNguoiHuongLoi", getSoNguoiHuongLoi());
		attributes.put("ghiChu", getGhiChu());
		attributes.put("baoCaoDLI", getBaoCaoDLI());
		attributes.put("ngayTao", getNgayTao());
		attributes.put("idNguoiTao", getIdNguoiTao());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long tramCapNuocId = (Long)attributes.get("tramCapNuocId");

		if (tramCapNuocId != null) {
			setTramCapNuocId(tramCapNuocId);
		}

		Long nam = (Long)attributes.get("nam");

		if (nam != null) {
			setNam(nam);
		}

		Long soDauNoiMoi = (Long)attributes.get("soDauNoiMoi");

		if (soDauNoiMoi != null) {
			setSoDauNoiMoi(soDauNoiMoi);
		}

		Long soHoHuongLoi = (Long)attributes.get("soHoHuongLoi");

		if (soHoHuongLoi != null) {
			setSoHoHuongLoi(soHoHuongLoi);
		}

		Long soNguoiHuongLoi = (Long)attributes.get("soNguoiHuongLoi");

		if (soNguoiHuongLoi != null) {
			setSoNguoiHuongLoi(soNguoiHuongLoi);
		}

		String ghiChu = (String)attributes.get("ghiChu");

		if (ghiChu != null) {
			setGhiChu(ghiChu);
		}

		Long baoCaoDLI = (Long)attributes.get("baoCaoDLI");

		if (baoCaoDLI != null) {
			setBaoCaoDLI(baoCaoDLI);
		}

		Date ngayTao = (Date)attributes.get("ngayTao");

		if (ngayTao != null) {
			setNgayTao(ngayTao);
		}

		Long idNguoiTao = (Long)attributes.get("idNguoiTao");

		if (idNguoiTao != null) {
			setIdNguoiTao(idNguoiTao);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@Override
	public long getTramCapNuocId() {
		return _tramCapNuocId;
	}

	@Override
	public void setTramCapNuocId(long tramCapNuocId) {
		_columnBitmask |= TRAMCAPNUOCID_COLUMN_BITMASK;

		if (!_setOriginalTramCapNuocId) {
			_setOriginalTramCapNuocId = true;

			_originalTramCapNuocId = _tramCapNuocId;
		}

		_tramCapNuocId = tramCapNuocId;
	}

	public long getOriginalTramCapNuocId() {
		return _originalTramCapNuocId;
	}

	@Override
	public long getNam() {
		return _nam;
	}

	@Override
	public void setNam(long nam) {
		_columnBitmask = -1L;

		if (!_setOriginalNam) {
			_setOriginalNam = true;

			_originalNam = _nam;
		}

		_nam = nam;
	}

	public long getOriginalNam() {
		return _originalNam;
	}

	@Override
	public long getSoDauNoiMoi() {
		return _soDauNoiMoi;
	}

	@Override
	public void setSoDauNoiMoi(long soDauNoiMoi) {
		_soDauNoiMoi = soDauNoiMoi;
	}

	@Override
	public long getSoHoHuongLoi() {
		return _soHoHuongLoi;
	}

	@Override
	public void setSoHoHuongLoi(long soHoHuongLoi) {
		_soHoHuongLoi = soHoHuongLoi;
	}

	@Override
	public long getSoNguoiHuongLoi() {
		return _soNguoiHuongLoi;
	}

	@Override
	public void setSoNguoiHuongLoi(long soNguoiHuongLoi) {
		_soNguoiHuongLoi = soNguoiHuongLoi;
	}

	@Override
	public String getGhiChu() {
		if (_ghiChu == null) {
			return StringPool.BLANK;
		}
		else {
			return _ghiChu;
		}
	}

	@Override
	public void setGhiChu(String ghiChu) {
		_ghiChu = ghiChu;
	}

	@Override
	public long getBaoCaoDLI() {
		return _baoCaoDLI;
	}

	@Override
	public void setBaoCaoDLI(long baoCaoDLI) {
		_columnBitmask |= BAOCAODLI_COLUMN_BITMASK;

		if (!_setOriginalBaoCaoDLI) {
			_setOriginalBaoCaoDLI = true;

			_originalBaoCaoDLI = _baoCaoDLI;
		}

		_baoCaoDLI = baoCaoDLI;
	}

	public long getOriginalBaoCaoDLI() {
		return _originalBaoCaoDLI;
	}

	@Override
	public Date getNgayTao() {
		return _ngayTao;
	}

	@Override
	public void setNgayTao(Date ngayTao) {
		_columnBitmask |= NGAYTAO_COLUMN_BITMASK;

		if (_originalNgayTao == null) {
			_originalNgayTao = _ngayTao;
		}

		_ngayTao = ngayTao;
	}

	public Date getOriginalNgayTao() {
		return _originalNgayTao;
	}

	@Override
	public long getIdNguoiTao() {
		return _idNguoiTao;
	}

	@Override
	public void setIdNguoiTao(long idNguoiTao) {
		_columnBitmask |= IDNGUOITAO_COLUMN_BITMASK;

		if (!_setOriginalIdNguoiTao) {
			_setOriginalIdNguoiTao = true;

			_originalIdNguoiTao = _idNguoiTao;
		}

		_idNguoiTao = idNguoiTao;
	}

	public long getOriginalIdNguoiTao() {
		return _originalIdNguoiTao;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KeHoachDauNam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KeHoachDauNam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KeHoachDauNam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KeHoachDauNamImpl keHoachDauNamImpl = new KeHoachDauNamImpl();

		keHoachDauNamImpl.setId(getId());
		keHoachDauNamImpl.setTramCapNuocId(getTramCapNuocId());
		keHoachDauNamImpl.setNam(getNam());
		keHoachDauNamImpl.setSoDauNoiMoi(getSoDauNoiMoi());
		keHoachDauNamImpl.setSoHoHuongLoi(getSoHoHuongLoi());
		keHoachDauNamImpl.setSoNguoiHuongLoi(getSoNguoiHuongLoi());
		keHoachDauNamImpl.setGhiChu(getGhiChu());
		keHoachDauNamImpl.setBaoCaoDLI(getBaoCaoDLI());
		keHoachDauNamImpl.setNgayTao(getNgayTao());
		keHoachDauNamImpl.setIdNguoiTao(getIdNguoiTao());

		keHoachDauNamImpl.resetOriginalValues();

		return keHoachDauNamImpl;
	}

	@Override
	public int compareTo(KeHoachDauNam keHoachDauNam) {
		int value = 0;

		if (getNam() < keHoachDauNam.getNam()) {
			value = -1;
		}
		else if (getNam() > keHoachDauNam.getNam()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KeHoachDauNam)) {
			return false;
		}

		KeHoachDauNam keHoachDauNam = (KeHoachDauNam)obj;

		long primaryKey = keHoachDauNam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KeHoachDauNamModelImpl keHoachDauNamModelImpl = this;

		keHoachDauNamModelImpl._originalId = keHoachDauNamModelImpl._id;

		keHoachDauNamModelImpl._setOriginalId = false;

		keHoachDauNamModelImpl._originalTramCapNuocId = keHoachDauNamModelImpl._tramCapNuocId;

		keHoachDauNamModelImpl._setOriginalTramCapNuocId = false;

		keHoachDauNamModelImpl._originalNam = keHoachDauNamModelImpl._nam;

		keHoachDauNamModelImpl._setOriginalNam = false;

		keHoachDauNamModelImpl._originalBaoCaoDLI = keHoachDauNamModelImpl._baoCaoDLI;

		keHoachDauNamModelImpl._setOriginalBaoCaoDLI = false;

		keHoachDauNamModelImpl._originalNgayTao = keHoachDauNamModelImpl._ngayTao;

		keHoachDauNamModelImpl._originalIdNguoiTao = keHoachDauNamModelImpl._idNguoiTao;

		keHoachDauNamModelImpl._setOriginalIdNguoiTao = false;

		keHoachDauNamModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KeHoachDauNam> toCacheModel() {
		KeHoachDauNamCacheModel keHoachDauNamCacheModel = new KeHoachDauNamCacheModel();

		keHoachDauNamCacheModel.id = getId();

		keHoachDauNamCacheModel.tramCapNuocId = getTramCapNuocId();

		keHoachDauNamCacheModel.nam = getNam();

		keHoachDauNamCacheModel.soDauNoiMoi = getSoDauNoiMoi();

		keHoachDauNamCacheModel.soHoHuongLoi = getSoHoHuongLoi();

		keHoachDauNamCacheModel.soNguoiHuongLoi = getSoNguoiHuongLoi();

		keHoachDauNamCacheModel.ghiChu = getGhiChu();

		String ghiChu = keHoachDauNamCacheModel.ghiChu;

		if ((ghiChu != null) && (ghiChu.length() == 0)) {
			keHoachDauNamCacheModel.ghiChu = null;
		}

		keHoachDauNamCacheModel.baoCaoDLI = getBaoCaoDLI();

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			keHoachDauNamCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			keHoachDauNamCacheModel.ngayTao = Long.MIN_VALUE;
		}

		keHoachDauNamCacheModel.idNguoiTao = getIdNguoiTao();

		return keHoachDauNamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", tramCapNuocId=");
		sb.append(getTramCapNuocId());
		sb.append(", nam=");
		sb.append(getNam());
		sb.append(", soDauNoiMoi=");
		sb.append(getSoDauNoiMoi());
		sb.append(", soHoHuongLoi=");
		sb.append(getSoHoHuongLoi());
		sb.append(", soNguoiHuongLoi=");
		sb.append(getSoNguoiHuongLoi());
		sb.append(", ghiChu=");
		sb.append(getGhiChu());
		sb.append(", baoCaoDLI=");
		sb.append(getBaoCaoDLI());
		sb.append(", ngayTao=");
		sb.append(getNgayTao());
		sb.append(", idNguoiTao=");
		sb.append(getIdNguoiTao());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.sol.ns.kehoachdaunam.dao.model.KeHoachDauNam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tramCapNuocId</column-name><column-value><![CDATA[");
		sb.append(getTramCapNuocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nam</column-name><column-value><![CDATA[");
		sb.append(getNam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soDauNoiMoi</column-name><column-value><![CDATA[");
		sb.append(getSoDauNoiMoi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soHoHuongLoi</column-name><column-value><![CDATA[");
		sb.append(getSoHoHuongLoi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soNguoiHuongLoi</column-name><column-value><![CDATA[");
		sb.append(getSoNguoiHuongLoi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ghiChu</column-name><column-value><![CDATA[");
		sb.append(getGhiChu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baoCaoDLI</column-name><column-value><![CDATA[");
		sb.append(getBaoCaoDLI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngayTao</column-name><column-value><![CDATA[");
		sb.append(getNgayTao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idNguoiTao</column-name><column-value><![CDATA[");
		sb.append(getIdNguoiTao());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KeHoachDauNam.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KeHoachDauNam.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _tramCapNuocId;
	private long _originalTramCapNuocId;
	private boolean _setOriginalTramCapNuocId;
	private long _nam;
	private long _originalNam;
	private boolean _setOriginalNam;
	private long _soDauNoiMoi;
	private long _soHoHuongLoi;
	private long _soNguoiHuongLoi;
	private String _ghiChu;
	private long _baoCaoDLI;
	private long _originalBaoCaoDLI;
	private boolean _setOriginalBaoCaoDLI;
	private Date _ngayTao;
	private Date _originalNgayTao;
	private long _idNguoiTao;
	private long _originalIdNguoiTao;
	private boolean _setOriginalIdNguoiTao;
	private long _columnBitmask;
	private KeHoachDauNam _escapedModel;
}