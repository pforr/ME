/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.cmon.dm.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.cmon.dm.dao.model.DM_THONXOM;
import vn.dtt.cmon.dm.dao.model.DM_THONXOMModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DM_THONXOM service. Represents a row in the &quot;DM_THONXOM&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.cmon.dm.dao.model.DM_THONXOMModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DM_THONXOMImpl}.
 * </p>
 *
 * @author khoa.vu
 * @see DM_THONXOMImpl
 * @see vn.dtt.cmon.dm.dao.model.DM_THONXOM
 * @see vn.dtt.cmon.dm.dao.model.DM_THONXOMModel
 * @generated
 */
public class DM_THONXOMModelImpl extends BaseModelImpl<DM_THONXOM>
	implements DM_THONXOMModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d m_ t h o n x o m model instance should use the {@link vn.dtt.cmon.dm.dao.model.DM_THONXOM} interface instead.
	 */
	public static final String TABLE_NAME = "DM_THONXOM";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "matinh", Types.VARCHAR },
			{ "mahuyen", Types.VARCHAR },
			{ "maxa", Types.VARCHAR },
			{ "thonxom", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_THONXOM (id LONG not null primary key,matinh VARCHAR(75) null,mahuyen VARCHAR(75) null,maxa VARCHAR(75) null,thonxom VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_THONXOM";
	public static final String ORDER_BY_JPQL = " ORDER BY dm_thonxom.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_THONXOM.id ASC";
	public static final String DATA_SOURCE = "dmDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.cmon.dm.dao.model.DM_THONXOM"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.cmon.dm.dao.model.DM_THONXOM"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.cmon.dm.dao.model.DM_THONXOM"));

	public DM_THONXOMModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DM_THONXOM.class;
	}

	@Override
	public String getModelClassName() {
		return DM_THONXOM.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("maTinh", getMaTinh());
		attributes.put("maHuyen", getMaHuyen());
		attributes.put("maXa", getMaXa());
		attributes.put("thonXom", getThonXom());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String maTinh = (String)attributes.get("maTinh");

		if (maTinh != null) {
			setMaTinh(maTinh);
		}

		String maHuyen = (String)attributes.get("maHuyen");

		if (maHuyen != null) {
			setMaHuyen(maHuyen);
		}

		String maXa = (String)attributes.get("maXa");

		if (maXa != null) {
			setMaXa(maXa);
		}

		String thonXom = (String)attributes.get("thonXom");

		if (thonXom != null) {
			setThonXom(thonXom);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getMaTinh() {
		if (_maTinh == null) {
			return StringPool.BLANK;
		}
		else {
			return _maTinh;
		}
	}

	@Override
	public void setMaTinh(String maTinh) {
		_maTinh = maTinh;
	}

	@Override
	public String getMaHuyen() {
		if (_maHuyen == null) {
			return StringPool.BLANK;
		}
		else {
			return _maHuyen;
		}
	}

	@Override
	public void setMaHuyen(String maHuyen) {
		_maHuyen = maHuyen;
	}

	@Override
	public String getMaXa() {
		if (_maXa == null) {
			return StringPool.BLANK;
		}
		else {
			return _maXa;
		}
	}

	@Override
	public void setMaXa(String maXa) {
		_maXa = maXa;
	}

	@Override
	public String getThonXom() {
		if (_thonXom == null) {
			return StringPool.BLANK;
		}
		else {
			return _thonXom;
		}
	}

	@Override
	public void setThonXom(String thonXom) {
		_thonXom = thonXom;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DM_THONXOM.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DM_THONXOM toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DM_THONXOM)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DM_THONXOMImpl dm_thonxomImpl = new DM_THONXOMImpl();

		dm_thonxomImpl.setId(getId());
		dm_thonxomImpl.setMaTinh(getMaTinh());
		dm_thonxomImpl.setMaHuyen(getMaHuyen());
		dm_thonxomImpl.setMaXa(getMaXa());
		dm_thonxomImpl.setThonXom(getThonXom());

		dm_thonxomImpl.resetOriginalValues();

		return dm_thonxomImpl;
	}

	@Override
	public int compareTo(DM_THONXOM dm_thonxom) {
		long primaryKey = dm_thonxom.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DM_THONXOM)) {
			return false;
		}

		DM_THONXOM dm_thonxom = (DM_THONXOM)obj;

		long primaryKey = dm_thonxom.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DM_THONXOM> toCacheModel() {
		DM_THONXOMCacheModel dm_thonxomCacheModel = new DM_THONXOMCacheModel();

		dm_thonxomCacheModel.id = getId();

		dm_thonxomCacheModel.maTinh = getMaTinh();

		String maTinh = dm_thonxomCacheModel.maTinh;

		if ((maTinh != null) && (maTinh.length() == 0)) {
			dm_thonxomCacheModel.maTinh = null;
		}

		dm_thonxomCacheModel.maHuyen = getMaHuyen();

		String maHuyen = dm_thonxomCacheModel.maHuyen;

		if ((maHuyen != null) && (maHuyen.length() == 0)) {
			dm_thonxomCacheModel.maHuyen = null;
		}

		dm_thonxomCacheModel.maXa = getMaXa();

		String maXa = dm_thonxomCacheModel.maXa;

		if ((maXa != null) && (maXa.length() == 0)) {
			dm_thonxomCacheModel.maXa = null;
		}

		dm_thonxomCacheModel.thonXom = getThonXom();

		String thonXom = dm_thonxomCacheModel.thonXom;

		if ((thonXom != null) && (thonXom.length() == 0)) {
			dm_thonxomCacheModel.thonXom = null;
		}

		return dm_thonxomCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", maTinh=");
		sb.append(getMaTinh());
		sb.append(", maHuyen=");
		sb.append(getMaHuyen());
		sb.append(", maXa=");
		sb.append(getMaXa());
		sb.append(", thonXom=");
		sb.append(getThonXom());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.cmon.dm.dao.model.DM_THONXOM");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maTinh</column-name><column-value><![CDATA[");
		sb.append(getMaTinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maHuyen</column-name><column-value><![CDATA[");
		sb.append(getMaHuyen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maXa</column-name><column-value><![CDATA[");
		sb.append(getMaXa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thonXom</column-name><column-value><![CDATA[");
		sb.append(getThonXom());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DM_THONXOM.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DM_THONXOM.class
		};
	private long _id;
	private String _maTinh;
	private String _maHuyen;
	private String _maXa;
	private String _thonXom;
	private DM_THONXOM _escapedModel;
}